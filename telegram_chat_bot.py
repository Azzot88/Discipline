import telebot
from telebot import types
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–¥–∞–ª–æ—Å—å –ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("Telegram bot token is missing. Please check your .env file.")

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
active_chats = {}  # –•—Ä–∞–Ω–∏—Ç —á–∞—Ç—ã –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ {chat_id: {user1, user2}}

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
    bot.send_message(message.chat.id, f"–í–∞—à Telegram ID: {message.chat.id}")
    show_main_menu(message.chat.id)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
def show_main_menu(chat_id):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        types.KeyboardButton("üìí –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç")
    )
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: message.text == "üìí –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç")
def invite_user_to_chat(message):
    user_id = message.chat.id

    if user_id in active_chats:
        bot.send_message(user_id, "–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —á–∞—Ç–µ. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —á–∞—Ç –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ.")
        return

    keyboard = types.InlineKeyboardMarkup()
    contacts = get_user_contacts(user_id)

    if not contacts:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.")
        return

    for contact_id, contact_name in contacts.items():
        keyboard.add(types.InlineKeyboardButton(contact_name, callback_data=f"invite_{contact_id}"))

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ —á–∞—Ç:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data.startswith("invite_"))
def handle_invite(call):
    inviter_id = call.message.chat.id
    invitee_id = int(call.data.split("_")[1])

    if inviter_id in active_chats:
        bot.send_message(inviter_id, "–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —á–∞—Ç–µ.")
        return

    bot.send_message(
        invitee_id,
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inviter_id} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å –≤ —á–∞—Ç. –ü—Ä–∏–º–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é /accept –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /decline."
    )
    active_chats[inviter_id] = {"partner": invitee_id, "state": "pending"}
    bot.send_message(inviter_id, "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /accept
@bot.message_handler(commands=['accept'])
def accept_invite(message):
    user_id = message.chat.id
    for inviter_id, chat_data in active_chats.items():
        if chat_data["partner"] == user_id and chat_data["state"] == "pending":
            chat_data["state"] = "active"
            active_chats[user_id] = {"partner": inviter_id, "state": "active"}

            bot.send_message(inviter_id, "–í–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ.")
            bot.send_message(user_id, "–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —á–∞—Ç—É.")
            start_chat(inviter_id, user_id)
            return

    bot.send_message(user_id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π.")

# –õ–æ–≥–∏–∫–∞ —á–∞—Ç–∞
def start_chat(user1_id, user2_id):
    bot.send_message(user1_id, "–ß–∞—Ç –Ω–∞—á–∞–ª—Å—è. –û–∂–∏–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å–æ–≤.")
    bot.send_message(user2_id, "–ß–∞—Ç –Ω–∞—á–∞–ª—Å—è. –û–∂–∏–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å–æ–≤.")
    ask_question(user1_id, user2_id)

def ask_question(user1_id, user2_id):
    question = "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?"
    bot.send_message(user1_id, f"–í–æ–ø—Ä–æ—Å: {question}")
    bot.send_message(user2_id, f"–í–æ–ø—Ä–æ—Å: {question}")
    active_chats[user1_id]["question"] = question
    active_chats[user2_id]["question"] = question

@bot.message_handler(func=lambda message: message.chat.id in active_chats)
def handle_answer(message):
    user_id = message.chat.id
    chat_data = active_chats[user_id]
    partner_id = chat_data["partner"]
    question = chat_data.get("question")

    if question:
        bot.send_message(partner_id, f"–û—Ç–≤–µ—Ç –æ—Ç {user_id}: {message.text}")
        bot.send_message(user_id, "–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω.")
        del chat_data["question"]

        if "question" not in active_chats[partner_id]:
            bot.send_message(user_id, "–û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç –≤–∞—à–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")

# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
def get_user_contacts(user_id):
    return {
        123456789: "–ö–æ–Ω—Ç–∞–∫—Ç 1",
        987654321: "–ö–æ–Ω—Ç–∞–∫—Ç 2"
    }

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
bot.polling()