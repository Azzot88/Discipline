import telebot
from telebot import types
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–¥–∞–ª–æ—Å—å –ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("Telegram bot token is missing. Please check your .env file.")

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
connections = {}  # –•—Ä–∞–Ω–∏—Ç –ø–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {user1_id: user2_id}

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
    bot.send_message(message.chat.id, f"–í–∞—à Telegram ID: {message.chat.id}")
    show_main_menu(message.chat.id)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
def show_main_menu(chat_id):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        types.KeyboardButton("üìí –í—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"),
        types.KeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç")
    )
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
@bot.message_handler(func=lambda message: message.text == "üìí –í—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
def select_user_from_contacts(message):
    user_id = message.chat.id

    if user_id in connections:
        bot.send_message(user_id, "–í—ã —É–∂–µ —Å–≤—è–∑–∞–Ω—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —á–∞—Ç –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º –Ω–æ–≤–æ–≥–æ.")
        return

    keyboard = types.InlineKeyboardMarkup()
    contacts = get_user_contacts(user_id)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if not contacts:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.")
        return

    for contact_id, contact_name in contacts.items():
        keyboard.add(types.InlineKeyboardButton(contact_name, callback_data=f"connect_{contact_id}"))

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤–∞—à–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("connect_"))
def connect_to_contact(call):
    user_id = call.message.chat.id
    target_user_id = int(call.data.split("_")[1])

    if user_id in connections:
        bot.send_message(user_id, "–í—ã —É–∂–µ —Å–≤—è–∑–∞–Ω—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —á–∞—Ç –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º –Ω–æ–≤–æ–≥–æ.")
        return

    connections[user_id] = target_user_id
    connections[target_user_id] = user_id

    bot.send_message(user_id, f"–í—ã —Å–≤—è–∑–∞–Ω—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {target_user_id}.")
    bot.send_message(target_user_id, f"–° –≤–∞–º–∏ —Å–≤—è–∑–∞–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}.")
    show_main_menu(user_id)

# –ó–∞–≥–ª—É—à–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_contacts(user_id):
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å {contact_id: contact_name} –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞.
    return {
        123456789: "–ö–æ–Ω—Ç–∞–∫—Ç 1",
        987654321: "–ö–æ–Ω—Ç–∞–∫—Ç 2"
    }

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞—Ç–∞
@bot.message_handler(func=lambda message: message.text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç")
def end_chat(message):
    user_id = message.chat.id

    if user_id in connections:
        partner_id = connections.pop(user_id)
        connections.pop(partner_id, None)

        bot.send_message(user_id, "–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–∞—Ç.")
        bot.send_message(partner_id, "–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.")
    else:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞.")

    show_main_menu(user_id)

# –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
@bot.message_handler(func=lambda message: message.chat.id in connections)
def relay_message(message):
    user_id = message.chat.id
    partner_id = connections[user_id]

    bot.send_message(partner_id, message.text)

# –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π
@bot.message_handler(func=lambda message: message.text == "–û—Ç–º–µ–Ω–∞")
def cancel_action(message):
    bot.send_message(message.chat.id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    show_main_menu(message.chat.id)

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
bot.polling()
